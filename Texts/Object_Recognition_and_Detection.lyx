#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\float_placement H
\paperfontsize 12
\spacing onehalf
\use_hyperref false
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 2.5cm
\topmargin 2cm
\rightmargin 4cm
\bottommargin 2cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 2
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Subsubsection
\paragraph_spacing onehalf
\noindent
Object Recognition and Detection 
\size footnotesize
(OpenCV)
\end_layout

\begin_layout Standard
\noindent
OpenComputerVision (OpenCV) is an open source project to interact with images
 and videos in a way to separate it in different information and manipulate
 it.
 OpenCV can be used to interact with objects like identification or counting.
 In this project the OpenCV is used to threshold the incoming image from
 the camera of the robot and count the white pixels within the binary image.
 
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
\noindent

\series bold
short overview
\end_layout

\begin_layout Plain Layout
\paragraph_spacing onehalf
\noindent

\shape italic
The code is taking the Image as a sensor message (sensor_msgs) from the
 camera of the G500 through an imageCallback fuction and produces a Pointer
 of the type imgData.
 This is the point where the message will later become a format that OpenCV
 is able to handle.
 OpenCV can be called in C++ code with specific commands which are present
 in this code by cv::, followed by a type.
 cv::Mat is using the mathematical functions of OpenCV to handle images
 in this case.
 But before the mathematical threshold can be applied, the image needs to
 be set gray scale, otherwise the threshold wouldn't produce a binary image.
 As the cv_ptr is pointing on the image, represented by the variable imgMat
 of an OpenCV type, it is possible to handle the image in a mathematical
 way and return the result into a second variable called 'filtered_image'.
 This procedure is done by ctvColor and can be specified with CV_BGR2GRAY.
 There are more options that can apply filters to an image but at this point
 this isn't necessary
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection*
Detailed
\end_layout

\begin_layout Standard
\paragraph_spacing onehalf
\noindent
For the system it is relatively easy to handle images but more complicated
 to handle ROS messages.
 As ROS is communicating with messages, it needs to be encoded into an image
 format that OpenCV is able to understand.
 Therefore the code needs to be like the following: 
\end_layout

\begin_layout Standard
\noindent
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\begin_inset listings
lstparams "numbers=left,basicstyle={\scriptsize\ttfamily},breaklines=true,tabsize=2,language={c++},backgroundcolor={\color[rgb]{0.95,0.95,0.95}},stringstyle={\color[rgb]{0.06, 0.10, 0.98}},keywordstyle={\color[rgb]{0.37, 0.08, 0.25}\bfseries},commentstyle={\color[rgb]{0.12, 0.38, 0.18 }\itshape},frame=lrbt,xleftmargin=15pt,emph={[1]{php}},emphstyle={[1]\color{black}},emph={[2]{if,and,or,else}},emphstyle={[2]\color[rgb]{0.74,0.74,.29}}"
inline false
status open

\begin_layout Plain Layout
\paragraph_spacing onehalf
\noindent

cv::Mat imgMat = cv_ptr->image;
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout

\shape italic
\size small
defining a pointer with the image content
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\paragraph_spacing onehalf
\noindent
The cv::Mat function makes it possible to establish a communication between
 OpenCV and ROS.
 imgMat in this case is declared as a pointer that is pointing at the received
 image from 
\color black
ROS
\color inherit
.
 This is possible by using the cv_bridge and initiate the pointer as a null
 pointer so it can be written with data.
 The lines: 
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
lstparams "numbers=left,basicstyle={\scriptsize\ttfamily},breaklines=true,tabsize=2,language={c++},backgroundcolor={\color[rgb]{0.95,0.95,0.95}},stringstyle={\color[rgb]{0.06, 0.10, 0.98}},keywordstyle={\color[rgb]{0.37, 0.08, 0.25}\bfseries},commentstyle={\color[rgb]{0.12, 0.38, 0.18 }\itshape},frame=lrbt,xleftmargin=15pt,emph={[1]{php}},emphstyle={[1]\color{black}},emph={[2]{if,and,or,else}},emphstyle={[2]\color[rgb]{0.74,0.74,.29}}"
inline false
status open

\begin_layout Plain Layout
\noindent

if(sensor_msgs::image_encodings::isColor(imgData->encoding)) 
\end_layout

\begin_layout Plain Layout
\noindent

  { 
\end_layout

\begin_layout Plain Layout
\noindent

	cv_ptr_green = cv_bridge::toCvCopy(imgData, sensor_msgs::image_encodings::BGR8)
; 
\end_layout

\begin_layout Plain Layout
\noindent

  }
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout

\shape italic
\size small
Starting to manage the image content if it comes as a color image
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\paragraph_spacing onehalf
\noindent
are checking the incoming message if it has color and if it comes as a picture,
 it will be encoded so OpenCV understands how to handle the data.
 The cv_bridge uses the message and encodes it into a BGR8 image that OpenCV
 is capable to handle and manipulate.
 Actually the system works with the color range of HSV (Hue, Saturation,
 Value) and the BGR8 image from the camera source needs to be converted.
 
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename Images/HSV_color_solid_cone.png
	scale 15

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout

\series bold
\shape italic
\size small
H
\series default
ue, 
\series bold
S
\series default
aturation, 
\series bold
V
\series default
alue.
 Instead of the wide known RGB, OpenCV uses the HSV color range
\begin_inset CommandInset label
LatexCommand label
name "fig:Hue,-Saturation,-Value."

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\noindent
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\begin_inset listings
lstparams "numbers=left,basicstyle={\scriptsize\ttfamily},breaklines=true,tabsize=2,language={c++},backgroundcolor={\color[rgb]{0.95,0.95,0.95}},stringstyle={\color[rgb]{0.06, 0.10, 0.98}},keywordstyle={\color[rgb]{0.37, 0.08, 0.25}\bfseries},commentstyle={\color[rgb]{0.12, 0.38, 0.18 }\itshape},frame=lrbt,xleftmargin=15pt,emph={[1]{php}},emphstyle={[1]\color{black}},emph={[2]{if,and,or,else}},emphstyle={[2]\color[rgb]{0.74,0.74,.29}}"
inline false
status open

\begin_layout Plain Layout
\noindent

cv::Mat imgMat = cv_ptr_green->image; 
\end_layout

\begin_layout Plain Layout
\noindent

cv::Mat hsv_image_green; 
\end_layout

\begin_layout Plain Layout
\noindent

cv::cvtColor(imgMat_green,hsv_image_green,COLOR_BGR2HSV);
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout

\shape italic
\size small
The image content is converted from BGR to HSV color range without losing
 information
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\paragraph_spacing onehalf
\noindent
This gives the user the ability to set limits to the threshold.
 The next step is to define variables that contain the upper and lower limits
 of the threshold and perform the actual threshold:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
lstparams "numbers=left,basicstyle={\scriptsize\ttfamily},breaklines=true,tabsize=2,language={c++},backgroundcolor={\color[rgb]{0.95,0.95,0.95}},stringstyle={\color[rgb]{0.06, 0.10, 0.98}},keywordstyle={\color[rgb]{0.37, 0.08, 0.25}\bfseries},commentstyle={\color[rgb]{0.12, 0.38, 0.18 }\itshape},frame=lrbt,xleftmargin=15pt,emph={[1]{php}},emphstyle={[1]\color{black}},emph={[2]{if,and,or,else}},emphstyle={[2]\color[rgb]{0.74,0.74,.29}}"
inline false
status open

\begin_layout Plain Layout
\noindent

cv::Mat lower_green_hue_range;
\end_layout

\begin_layout Plain Layout
\noindent

cv::Mat upper_green_hue_range;
\end_layout

\begin_layout Plain Layout

cv::inRange(hsv_image_green, cv::Scalar(42.5, 50, 50), cv::Scalar(67.5, 255,
 255), lower_green_hue_range);
\end_layout

\begin_layout Plain Layout

cv::inRange(hsv_image_green, cv::Scalar(42.5, 10, 35), cv::Scalar(67.5, 255,
 255), upper_green_hue_range);
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout

\shape italic
\size small
Defining the HSV range for colors that point to the objects
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\paragraph_spacing onehalf
\noindent
This step gives the first possibility to manipulate the detection depth
 as the color range is given in table
\color black
 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:HUE_color_table"

\end_inset

.

\color inherit
 inRange only delivers values from the image, that are within the set scalar
 of values occurring in the code snipped.
 The next step provides a deeper, secondary limitation as the user can define
 a weighting within the range of the upper and lower limit:
\end_layout

\begin_layout Standard
\noindent
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\begin_inset listings
lstparams "numbers=left,basicstyle={\scriptsize\ttfamily},breaklines=true,tabsize=2,language={c++},backgroundcolor={\color[rgb]{0.95,0.95,0.95}},stringstyle={\color[rgb]{0.06, 0.10, 0.98}},keywordstyle={\color[rgb]{0.37, 0.08, 0.25}\bfseries},commentstyle={\color[rgb]{0.12, 0.38, 0.18 }\itshape},frame=lrbt,xleftmargin=15pt,emph={[1]{php}},emphstyle={[1]\color{black}},emph={[2]{if,and,or,else}},emphstyle={[2]\color[rgb]{0.74,0.74,.29}}"
inline false
status open

\begin_layout Plain Layout
\noindent

cv::Mat green_hue_image;
\end_layout

\begin_layout Plain Layout

cv::addWeighted(lower_green_hue_range, 1.0, upper_green_hue_range, 1.0, 0.0,
 green_hue_image);
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout

\shape italic
\size small
Defining the weight for the hue values that trigger the detection
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\paragraph_spacing onehalf
\noindent
As the binary image is not a color value, ROS has problems to handle it
 as message data.
 To make it more handy for the system, the threshold image is set to a color
 image again:
\end_layout

\begin_layout Standard
\noindent
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\begin_inset listings
lstparams "numbers=left,basicstyle={\scriptsize\ttfamily},breaklines=true,tabsize=2,language={c++},backgroundcolor={\color[rgb]{0.95,0.95,0.95}},stringstyle={\color[rgb]{0.06, 0.10, 0.98}},keywordstyle={\color[rgb]{0.37, 0.08, 0.25}\bfseries},commentstyle={\color[rgb]{0.12, 0.38, 0.18 }\itshape},frame=lrbt,xleftmargin=15pt,emph={[1]{php}},emphstyle={[1]\color{black}},emph={[2]{if,and,or,else}},emphstyle={[2]\color[rgb]{0.74,0.74,.29}}"
inline false
status open

\begin_layout Plain Layout
\noindent

cv::cvtColor(green_hue_image, cv_ptr_green->image, CV_GRAY2BGR);
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout

\shape italic
\size small
ROS needs to use BGR image information to use it as a message
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\paragraph_spacing onehalf
\noindent
The image is now a BGR color image (it actually comes only with black and
 white information) and needs to be converted into a ROS message again so
 the system can handle it again for other ROS services:
\end_layout

\begin_layout Standard
\noindent
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\begin_inset listings
lstparams "numbers=left,basicstyle={\scriptsize\ttfamily},breaklines=true,tabsize=2,language={c++},backgroundcolor={\color[rgb]{0.95,0.95,0.95}},stringstyle={\color[rgb]{0.06, 0.10, 0.98}},keywordstyle={\color[rgb]{0.37, 0.08, 0.25}\bfseries},commentstyle={\color[rgb]{0.12, 0.38, 0.18 }\itshape},frame=lrbt,xleftmargin=15pt,emph={[1]{php}},emphstyle={[1]\color{black}},emph={[2]{if,and,or,else}},emphstyle={[2]\color[rgb]{0.74,0.74,.29}}"
inline false
status open

\begin_layout Plain Layout
\noindent

imgPub_perc_green.publish(*(cv_ptr_green->toImageMsg()));
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout

\shape italic
\size small
The green percentage value is published as a message
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\paragraph_spacing onehalf
\noindent
This provides a message for the ROS environment and as the vision receives
 a certain value, it publishes it findings on a topic.
 As this will publish everything it will find due to green color, it would
 write the value into a file even if it finds just one pixel.
 Due to image noise in real world conditions, this would produce a lot of
 misleading findings and the systems needs to react only at a specific limitatio
n.
 
\end_layout

\begin_layout Standard
\noindent

\family typewriter
\size small
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent

\family typewriter
\size small
\begin_inset listings
lstparams "numbers=left,basicstyle={\scriptsize\ttfamily},breaklines=true,tabsize=2,language={c++},backgroundcolor={\color[rgb]{0.95,0.95,0.95}},stringstyle={\color[rgb]{0.06, 0.10, 0.98}},keywordstyle={\color[rgb]{0.37, 0.08, 0.25}\bfseries},commentstyle={\color[rgb]{0.12, 0.38, 0.18 }\itshape},frame=lrbt,xleftmargin=15pt,emph={[1]{php}},emphstyle={[1]\color{black}},emph={[2]{if,and,or,else}},emphstyle={[2]\color[rgb]{0.74,0.74,.29}}"
inline false
status open

\begin_layout Plain Layout
\noindent

cv::Mat partROI_green;	             //defining green color percentage
\end_layout

\begin_layout Plain Layout
\noindent

	float count_white_green = 0;	   //set white count to zero
\end_layout

\begin_layout Plain Layout
\noindent

	float count_black_green = 0; 	  //set black count to zero
\end_layout

\begin_layout Plain Layout
\noindent

	count_white_green = countNonZero(green_hue_image);          //count white
 pixels   
\end_layout

\begin_layout Plain Layout
\noindent

	count_black_green = green_hue_image.cols * green_hue_image.rows - count_white_gre
en; //count all pixels - white pixels 	    
\end_layout

\begin_layout Plain Layout
\noindent

	float perc_green =count_white_green/768;  //percentage calculation
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\family typewriter
\size small
\begin_inset Caption Standard

\begin_layout Plain Layout

\shape italic
\size small
Calculations of the percentage that the image is filled with a color (here:
 green)
\begin_inset CommandInset label
LatexCommand label
name "alg:percentage_calculation_code"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\paragraph_spacing onehalf
\noindent
This provides a calculation to get a percentage value but as the system
 needs the limit, another function can sort out the not needed values:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
lstparams "numbers=left,basicstyle={\scriptsize\ttfamily},breaklines=true,showstringspaces=false,tabsize=2,language={c++},backgroundcolor={\color[rgb]{0.95,0.95,0.95}},stringstyle={\color[rgb]{0.06, 0.10, 0.98}},keywordstyle={\color[rgb]{0.37, 0.08, 0.25}\bfseries},commentstyle={\color[rgb]{0.12, 0.38, 0.18 }\itshape},frame=lrbt,xleftmargin=15pt,emph={[1]{php}},emphstyle={[1]\color{black}},emph={[2]{if,and,or,else}},emphstyle={[2]\color[rgb]{0.74,0.74,.29}}"
inline false
status open

\begin_layout Plain Layout
\noindent

if (perc_green >= 0.28) 	
\end_layout

\begin_layout Plain Layout
\noindent

 { 	    cout << "I SEE GREEN PLANTS" << endl; 	 		
\end_layout

\begin_layout Plain Layout
\noindent

 	[...]
\end_layout

\begin_layout Plain Layout

myfile_green <<"Percentage, "<< perc_green << ", " << "latitude, " << m_gpsPosit
ion.latitude * 3.5 << ", longitude, " << m_gpsPosition.longitude * 3.2 <<",
 " << filename_green << endl;
\end_layout

\begin_layout Plain Layout

imgPub_perc_green_string.publish(*(cv_ptr_green->toImageMsg()));
\end_layout

\begin_layout Plain Layout

 }
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout

\shape italic
\size small
The algorithm starts if the percentage is over 0.28%.
 This can be changed for noise reduction in camera sensors.
 The part in the clause defines how the values are written into the CSV
 file
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\paragraph_spacing onehalf
\noindent
The function only writes the found values into the CSV if it is higher than
 0.28%.
 Since the simulator has very low noise, I chose to set a very low limit.
 Depending on the used sensor, and different noise behavior, this value
 can be changed.
\end_layout

\begin_layout Standard
\paragraph_spacing onehalf
\noindent
As binary pictures represent only two states with black (0) and white (1),
 the calculations are relatively easy by using the Indicator Function:
\end_layout

\begin_layout Standard
\paragraph_spacing onehalf
\noindent
\align center
\begin_inset Formula $1_{A}:X\rightarrow\left\{ 0,1\right\} $
\end_inset

 
\end_layout

\begin_layout Standard
\noindent
\align center

\family typewriter
\size small
(Indicator Function)
\end_layout

\begin_layout Standard
\paragraph_spacing onehalf
\noindent
\align center
defined as:
\end_layout

\begin_layout Standard
\align center
\begin_inset Formula $1_{A}(x):=\begin{cases}
1\;if\;x\in A,\\
0\;if\;x\notin A.
\end{cases}$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},backgroundcolor={\color[rgb]{0.95,0.95,0.95}}"
inline false
status open

\begin_layout Plain Layout

white Pixels = countNonZero (imgMat)
\end_layout

\begin_layout Plain Layout

black Pixels = (imgMat.cols x imgMat.rows) - white Pixels
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout

\shape italic
\size small
Theoretical construction of the calculations in the code, based on the indicator
 function
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\paragraph_spacing onehalf
\noindent
Due to the resolution of the camera, the white pixels need to be divided
 by 768 (cf.
 Alg.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:percentage_calculation_code"

\end_inset

)to get the percentage of the occurring color that is identified throughout
 the threshold.
\end_layout

\begin_layout Standard
\paragraph_spacing onehalf
\noindent
The pixel count is published into a .CSV file together with the GPS position
 on the GPS node from ROS:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
lstparams "numbers=left,basicstyle={\scriptsize\ttfamily},breaklines=true,showstringspaces=false,tabsize=2,language={c++},backgroundcolor={\color[rgb]{0.95,0.95,0.95}},stringstyle={\color[rgb]{0.06, 0.10, 0.98}},keywordstyle={\color[rgb]{0.37, 0.08, 0.25}\bfseries},commentstyle={\color[rgb]{0.12, 0.38, 0.18 }\itshape},frame=lrbt,xleftmargin=15pt,emph={[1]{php}},emphstyle={[1]\color{black}},emph={[2]{if,and,or,else}},emphstyle={[2]\color[rgb]{0.74,0.74,.29}}"
inline false
status open

\begin_layout Plain Layout

myfile_green <<"Percentage, "<< perc_green << ", " << "latitude, " << m_gpsPosit
ion.latitude * 3.5 << ", longitude, " << m_gpsPosition.longitude * 3.2 <<",
 " << filename_green << endl;
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout

\shape italic
\size small
„myfile“ creates and opens a new raw text file that receives a the counted
 percentage and GPS location (x,y) and divides them by a comma
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\noindent
\align left
Output:
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "80col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename /media/olaf/TOSHIBA 1TB/Master Thesis/Images/for yed/Screenshot-green_plants.csv (TOSHIBA 1TB -media-olaf-TOSHIBA 1TB-Master Thesis-Results-Scene 2-21) - gedit.png
	scale 35

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout

\shape italic
\size small
%, lat, lon, File name of photograph
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\paragraph_spacing onehalf
\noindent
To discriminate each color and object, I've set the values in my code by
 the following schema (based on HSV color range):
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Float table
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="10" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Color
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Hue min.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Hue max.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\color red
Red
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
10
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\color orange
Orange
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
12.5
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
17.5
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\color yellow
Yellow
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
22.5
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
32.5
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\color lime
Green
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
42.5
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
67.5
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\color cyan
Cyan
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
77.5
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
92.5
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\color blue
Blue
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
100
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
130
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\color magenta
Purple
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
135
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
165
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\color red
Red
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
170
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
179
\end_layout

\end_inset
</cell>
</row>
<row>
<cell multicolumn="1" alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
White is based on Saturation and Value
\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout

\shape italic
\size small
Table explaining the color range for the threshold based on [H]ue 0-180,
 [S]aturation 0-255, [V]alue 0-255
\begin_inset CommandInset label
LatexCommand label
name "tab:HUE_color_table"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\paragraph_spacing onehalf
\noindent
Without defining the color range, the function defines the threshold itself.
 This leads to problems due to non specified object range.
 The example of the text above refers to the green color range of plant
 detection.
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename Images/opencv_graph.png
	scale 11

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout

\shape italic
\size small
The Robot's camera takes up the video stream and performs a threshold on
 green color which is presented as a binary image.
 The occurring white pixels are counted against black pixels and are used
 as percentage of plant appearance
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\paragraph_spacing onehalf
\noindent
As the code runs, and publishes the found values on a topic as well as in
 a CSV file, it also publishes a message on a second topic that is defined
 the same way as the perception, just followed by a 
\begin_inset Quotes eld
\end_inset

_string
\begin_inset Quotes erd
\end_inset

 suffix.
 
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
lstparams "numbers=left,basicstyle={\scriptsize\ttfamily},breaklines=true,showstringspaces=false,tabsize=2,language={c++},backgroundcolor={\color[rgb]{0.95,0.95,0.95}},stringstyle={\color[rgb]{0.06, 0.10, 0.98}},keywordstyle={\color[rgb]{0.37, 0.08, 0.25}\bfseries},commentstyle={\color[rgb]{0.12, 0.38, 0.18 }\itshape},frame=lrbt,xleftmargin=15pt,emph={[1]{php}},emphstyle={[1]\color{black}},emph={[2]{if,and,or,else}},emphstyle={[2]\color[rgb]{0.74,0.74,.29}}"
inline false
status open

\begin_layout Plain Layout

ros::Publisher imgPub_perc_green_string = n_green.advertise<sensor_msgs::Image>("
Image_Perception_green_string", 100);
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout

\shape italic
\size small
Beside the color detection, a trigger for later use is set
\begin_inset CommandInset label
LatexCommand label
name "alg:Image_string_algorithm"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\paragraph_spacing onehalf
\noindent
This triggers SEMREC to write knowledge as the system detects the object.
\end_layout

\end_body
\end_document
